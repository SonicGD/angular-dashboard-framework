{"version":3,"sources":["adf.locale.constants.js","adf.locale.module.js","adf.module.js","dashboard.provider.js","filters/adf-order-by-object-key.filter.js","directives/adf-dashboard-column.directive.js","directives/adf-dashboard-row.directive.js","directives/adf-dashboard.directive.js","angular-dashboard-framework-tpls.min.js","directives/adf-structure-preview.directive.js","directives/adf-widget-content.directive.js","directives/adf-widget.directive.js","services/adf-dashboard.service.js","services/adf-structure-preview.service.js","services/adf-utils.service.js","services/widget.service.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE","value","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","translate","label","translation","widgets","widgetsPath","structures","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","this","widget","name","w","extend","reload","frameless","edit","immediate","apply","path","structure","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","cid","id","Date","getTime","idEquals","other","toString","filter","$filter","item","key","array","forEach","objectKey","push","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","i","length","wid","findColumn","model","rows","r","j","columns","c","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","link","col","isDefined","isArray","cloned","append","adfModel","restrict","replace","scope","editMode","continuousEditMode","options","templateUrl","columnTemplate","row","$timeout","$uibModal","adfDashboardService","adfUtilsService","_openEditMode","controller","getNewModalScope","$new","widgetFilter","structureName","$watch","oldVal","newVal","adfWidgetFilter","copy","error","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","split","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","windowClass","size","changeStructure","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","type","categories","createCategories","adfAddTemplatePath","addTemplateUrl","opts","addWidget","config","createConfiguration","addNewWidgetToModel","isEditModeImmediate","$attr","editable","enableConfirmDelete","stringToBoolean","maximizable","collapsible","$inject","transclude","adfStructurePreviewService","adjustRowHeight","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","content","newScope","renderWidget","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","preLink","definition","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","indexOf","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","err","event","args","widgetClasses","classes","openFullScreen","fullScreenScope","modalSize","compile","pre","post","factory","_copyWidgets","source","target","shift","_fillStructure","root","counter","isUndefined","_readColumns","hasOwnProperty","cfg","_findFirstWidgetColumn","unshift","category","service","_tests","container","height","style","string","toLowerCase","Boolean","object","arr","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","response","put","run"],"mappings":"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","file":"angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n'use strict';\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    'use strict';\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n","(function(window, undefined) {'use strict';\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"adfDashboardService\", \"adfUtilsService\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', [\"adfTemplatePath\", \"adfStructurePreviewService\", function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', [\"$log\", \"dashboard\", \"$rootScope\", function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  }]);\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-accordion-group> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n})(window);","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    'use strict';\n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    'use strict';\n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    'use strict';\n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-accordion-group> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n})(window);"]}